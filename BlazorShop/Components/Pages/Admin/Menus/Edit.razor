@page "/menus/edit/{id:int}"
@rendermode InteractiveServer
@using BlazorShop.Models.Db
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<OnlineShopContext> DbContextFactory
@inject NavigationManager Nav
@implements IAsyncDisposable

<h3>Edit</h3>

@if (!string.IsNullOrWhiteSpace(saveError))
{
    <div class="alert alert-danger">@saveError</div>
}

@if (menu is not null)
{
    <EditForm Model="menu" OnValidSubmit="UpdateAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- El Id debe viajar en el modelo -->
        @* <InputHidden @bind-Value="menu.Id" /> *@

        <div class="mb-3">
            <label class="form-label">Title</label>
            <InputText class="form-control" @bind-Value="menu.MenuTitle" />
            <ValidationMessage For="() => menu.MenuTitle" />
        </div>

        <div class="mb-3">
            <label class="form-label">Link</label>
            <InputText class="form-control" @bind-Value="menu.Link" />
            <ValidationMessage For="() => menu.Link" />
        </div>

        <div class="mb-3">
            <label class="form-label">Type</label>
            <InputText class="form-control" @bind-Value="menu.Type" />
            <ValidationMessage For="() => menu.Type" />
        </div>

        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">Guardar</button>
            <a class="btn btn-secondary" href="/menus">Cancelar</a>
        </div>
    </EditForm>
}
else
{
    <p>Cargando…</p>
}

@code {
    [Parameter] public int id { get; set; }

    private OnlineShopContext? context;
    private Menu? menu;
    private string? saveError;

    protected override async Task OnInitializedAsync()
    {
        context = await DbContextFactory.CreateDbContextAsync();
        menu = await context.Menus.FindAsync(id);
        if (menu is null)
        {
            saveError = $"No se encontró el menú {id}.";
        }
    }

    private async Task UpdateAsync()
    {
        if (context is null || menu is null) return;

        try
        {
            await context.SaveChangesAsync();   // listo
            Nav.NavigateTo("/menus");
        }
        catch (DbUpdateConcurrencyException ex)
        {
            saveError = $"Conflicto de concurrencia: {ex.Message}";
        }
        catch (Exception ex)
        {
            saveError = $"Error guardando: {ex.Message}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (context is IAsyncDisposable ad) await ad.DisposeAsync();
        else context?.Dispose();
    }
}

@page "/menus/delete/{id:int}"
@rendermode InteractiveServer
@using BlazorShop.Models.Db
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<OnlineShopContext> DbContextFactory
@inject NavigationManager Nav
@implements IAsyncDisposable

<PageTitle>Delete Menu</PageTitle>
<h3>Delete</h3>

@if (!string.IsNullOrWhiteSpace(loadError))
{
    <div class="alert alert-danger">@loadError</div>
}
else if (menu is null)
{
    <p>Cargando…</p>
}
else
{
    <div class="alert alert-warning">¿Seguro que quieres eliminar este registro?</div>

    <dl class="row">
        <dt class="col-sm-3">Title</dt>
        <dd class="col-sm-9">@menu.MenuTitle</dd>

        <dt class="col-sm-3">Link</dt>
        <dd class="col-sm-9">@menu.Link</dd>

        <dt class="col-sm-3">Type</dt>
        <dd class="col-sm-9">@menu.Type</dd>
    </dl>

    <div class="d-flex gap-2">
        <button class="btn btn-danger" @onclick="DeleteAsync" disabled="@isDeleting">
            @(isDeleting ? "Eliminando..." : "Delete")
        </button>
        <a class="btn btn-secondary" href="/menus">Cancel</a>
    </div>

    @if (!string.IsNullOrWhiteSpace(deleteError))
    {
        <div class="text-danger mt-3">@deleteError</div>
    }
}

@code {
    [Parameter] public int id { get; set; }

    private OnlineShopContext? context;
    private Menu? menu;
    private string? loadError;
    private string? deleteError;
    private bool isDeleting;

    protected override async Task OnParametersSetAsync()
    {
        context ??= await DbContextFactory.CreateDbContextAsync();
        menu = await context.Menus.FindAsync(id);
        loadError = menu is null ? $"No existe el menú con Id={id}." : null;
    }

    private async Task DeleteAsync()
    {
        if (context is null || menu is null) return;

        try
        {
            isDeleting = true;
            context.Menus.Remove(menu);
            await context.SaveChangesAsync();
            Nav.NavigateTo("/menus", forceLoad: true);
        }
        catch (DbUpdateException ex)
        {
            // Mensaje más amable si hay restricción FK (menú en uso)
            deleteError = ex.InnerException?.Message?.Contains("FOREIGN KEY") == true
                ? "No se puede eliminar: el menú está en uso por otros registros."
                : $"Error eliminando: {ex.Message}";
        }
        catch (Exception ex)
        {
            deleteError = $"Error eliminando: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (context is IAsyncDisposable ad) await ad.DisposeAsync();
        else context?.Dispose();
    }
}
